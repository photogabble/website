<!DOCTYPE html>
<html dir="ltr" lang="{{ metadata.language }}">
<head>
    <meta charset="UTF-8"/>
    <meta http-equiv="x-ua-compatible" content="ie=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover"/>

    <!-- Feeds -->
    <link rel="alternate" href="{{ metadata.feedUrl }}" type="application/atom+xml" title="Simon Dann's Digital Garden">

    <!-- Mastodon Verification -->
    <link rel="me" href="https://notacult.social/@carbontwelve" title="Mastodon: Not A Cult"/>
    <link rel="me" href="https://phpc.social/@carbontwelve" title="Mastodon: PHPC"/>

    <!-- Indie login Verification -->
    <link rel="me authn" href="https://github.com/carbontwelve">

    <!-- Webmentions -->
    <link rel="webmention" href="https://webmention.io/photogabble.co.uk/webmention" />

    <!-- SEO -->
    <title>{{ title or metadata.title }}</title>
    <meta name="description" content="{{ description or metadata.description }}"/>
    <link rel="canonical" href="{{ canonical or page.url }}"/>
    <meta name="robots" content="index, follow"/>
    <meta name="generator" content="Eleventy">
    {% block head %}{% endblock %}

    <!-- Open Graph -->
    <meta property="og:locale" content="en_GB"/>
    <meta property="og:site_name" content="{{ metadata.title }}"/>
    <meta property="og:title" content="{{ title or metadata.title }}"/>
    <meta property="og:type" content="{{ ogtype or 'website' }}"/>
    <meta property="og:url" content="{{ metadata.url }}{{ page.url }}"/>
    {% if ogImageHref %}
        <meta property="og:image" content="{{ ogImageHref }}">
        <meta name="twitter:card" content="summary_large_image"/>
    {% else %}
        <meta name="twitter:card" content="summary"/>
    {% endif %}

    <meta name="twitter:site" content="@carbontwelve"/>
    <meta name="twitter:creator" content="@carbontwelve"/>
    <meta name="twitter:title" content="{{ title or metadata.title }}"/>

    {% if ogtype === 'article' %}
        <meta name="twitter:label1" content="Words"/>
        <meta name="twitter:data1" content="{{ readingTime.words }}"/>

        <meta name="twitter:label2" content="Est. reading time"/>
        <meta name="twitter:data2" content="{{ readingTime.time }}"/>

        <meta name="article:published_time" content="{{ page.date.toISOString() }}"/>
        {#        TODO: #}
        {#        <meta name="article:modified_time" content=""/>#}
        {#        <meta name="article:expiration_time" content=""/>#}

        {% if contentType %}
            <meta name="article:section" content="{{ contentType }}"/>
        {% endif %}

        {% for tag in tags %}
            <meta name="article:tag" content="{{ tag }}"/>
        {% endfor %}
    {% endif %}

    <!-- Favicon Meta -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#2b5797">
    <meta name="theme-color" content="#ffffff">

    <!-- Assets, 3rd party scripts, etc -->
    <link href="https://unpkg.com/prismjs@1.20.0/themes/prism-okaidia.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/main.css"/>
    {% block stylesheet %}{% endblock %}
    <script data-goatcounter="https://photogabble.goatcounter.com/count" async src="https://gc.zgo.at/count.js"></script>
</head>
<body class="theme__default">

<main class="full-width">
    <header id="main-nav">
        <div class="main-nav">
            <nav>{% for crumb in folder | breadcrumbs %}{% if crumb.href %}<a href="{{ crumb.href }}" title="{{ crumb.title }}">{{ crumb.text or crumb.title }}</a>{% else %}<span>{{ crumb.title }}</span>{% endif %}<span>/</span>{% endfor %}</nav>
            <div><form><input placeholder="search" /></form><span>|</span>{% block navigation %}{% endblock %}<button id="jumbo-toggle">Menu</button></div>
        </div>
        {% include "components/navigation/jumbo-nav.njk" %}
    </header>

    <div id="content">
        {% block content %}{{ content | safe }}{% endblock %}

        <footer>
            <p>
                Â© {{ build.timestamp | dateToFormat('yyyy') }} Simon Dann. <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" title="Licensed CC BY-NC 4.0">CC BY-NC-SA 4.0</a> | <a href="https://github.com/photogabble/website">src</a> | <a href="/legal/privacy">cookies &amp; privacy</a>.<br/>
                <small>
                    Any and all opinions listed here are my own and not representative of my employers; future, past and present.<br/> I may earn a portion of sales from
                    products that are purchased through this site as part of <a href="/legal/affiliate-partnerships/" title="Disclosure of affiliate partnerships">Affiliate Partnerships</a> with retailers.<br/>
                    <small>Page built {% if metadata.commit.ref %} from <a href="{{ metadata.commit.url }}/commit/{{ metadata.commit.ref }}">{{ metadata.commit.ref | limit(7) }}</a> {% endif %} on {{ build.timestamp | dateToFormat('DDDD') }} at {{ build.timestamp | dateToFormat('TT') }} by <a href="https://www.netlify.com/">Netlify Elves</a>.</small>
                </small>
            </p>
        </footer>
    </div>
</main>

<script>
  // See: https://anothercodingguy.hashnode.dev/focus-trapping-focus-looping
  const FOCUSABLES = 'a[href]:not([disabled]), area[href]:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, [tabindex="0"], [contenteditable]';

  const jumboMenu = document.querySelector('#jumbo-nav');
  const mainMenu = document.querySelector('#main-nav');
  const jumboToggle = document.querySelector('#jumbo-toggle');

  let focusableItems;

  const trappedNavigationEventHandler = (e) => {
    if (e.key.toLowerCase() === 'escape') {
      closeJumboMenu();
      return;
    }

    if (e.key.toLowerCase() !== 'tab') return;
    if (e.target === focusableItems[0] && e.shiftKey) {
      e.preventDefault();
      focusableItems[focusableItems.length-1].focus();
    } else if (!e.shiftKey && e.target === focusableItems[focusableItems.length-1]) {
      e.preventDefault();
      focusableItems[0].focus();
    }
  }

  function closeJumboMenu() {
    jumboMenu.classList.remove('jumbo-nav__open');
    mainMenu.classList.remove('jumbo-nav__open');

    for (const item of focusableItems) {
      item.removeEventListener('keydown', trappedNavigationEventHandler);
    }

    jumboToggle.focus();
    focusableItems = undefined;
  }

  function openJumboMenu() {
    jumboMenu.classList.add('jumbo-nav__open');
    mainMenu.classList.add('jumbo-nav__open');

    // Add keydown handler to all tabbable items within jumboMenu and mainMenu
    focusableItems = [
      ...mainMenu.querySelectorAll(FOCUSABLES),
      ...jumboMenu.querySelectorAll(FOCUSABLES)
    ];

    for (const item of focusableItems) {
      item.addEventListener('keydown', trappedNavigationEventHandler);
    }
  }

  jumboToggle.addEventListener('click', (e) => {
    e.preventDefault();

    if (jumboMenu.classList.contains('jumbo-nav__open')) {
      closeJumboMenu();
    } else {
      openJumboMenu();
    }
  });

  // When on mobile the usage of flex-flow column-reverse means there is a disconnect between the keyboard nav
  // and how the page displays. In the off chance that someone is viewing this on a device that triggers the
  // mobile view and has a keyboard used for navigation then the keyboard focus must begin on the first
  // focusable in the right column.

  // TODO: (RC2024): This is partially complete, need to do the same focus trapping as on the jumbo menu
  //       so that when focus exits the right hand side it begins on the left hand side

  const identifyFirstFocus = () => {
    const list = document.getElementById('right').querySelectorAll(FOCUSABLES);
    if (list[0]) list[0].focus();
  };

  document.addEventListener("DOMContentLoaded", function () {
    if (window.innerWidth <= 900) {
      // identifyFirstFocus();

      // Move navbar out of left column on mobile
      // const nav = document.getElementById('navigation');
      // const right = document.getElementById('right');
      // console.log(nav, right);
      //
      // right.prepend(nav);
    }
  });
</script>

</body>
</html>
